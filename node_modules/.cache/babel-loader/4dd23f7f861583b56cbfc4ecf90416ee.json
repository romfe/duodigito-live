{"ast":null,"code":"var _jsxFileName = \"/home/legendaryhero/programas/bridge/processo_seletivo/front_end/src/App.tsx\",\n    _s = $RefreshSig$();\n\n//importação de bibliotecas\nimport { useState } from 'react';\nimport { css } from '@emotion/css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'; //importação de componentes da aplicação\n\nimport { EntradaDados } from './components/EntradaDados';\nimport { Historico } from './components/Historico';\nimport api from './api/apiCalculo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // estado para armazenar o histórico de consultas do usuário\n  const [historicoDeCalculos, setHistoricoDeCalculos] = useState([]); // variável que armazena o máximo de consultas permitidas pelo usuário por sessão\n\n  const numeroMaximoDeConsultas = 30; // função que envia os dados à api e adiciona a resposta à constante historicoDeCalculos\n  // também verifica o número informado pelo usuário e exibe mensagens de erro\n\n  const enviarDados = async numero => {\n    if (numero > 100) {\n      if (historicoDeCalculos.length >= numeroMaximoDeConsultas) {\n        toast.error(\"Número máximo de consultas atingido. Atualize a página e tente novamente\");\n      } else {\n        try {\n          const response = await api.get(`/calculo?input=${numero}`);\n          const existeSolucao = response.data;\n\n          if (existeSolucao.solucao === 0) {\n            // caso a API não tenha encontrado solução, retorna o valor 0\n            // a mensagem de erro é exibida ao usuário\n            toast.error(\"Não foi encontrada solução. Verifique o número informado\");\n          } else {\n            // caso a API retorne um valor válido, a nova resposta é armazenada \n            setHistoricoDeCalculos([...historicoDeCalculos, response.data]);\n          }\n        } catch (error) {\n          toast.error(\"Erro na comunicação com o servidor.\");\n        }\n      }\n    } else {\n      toast.error(\"Por favor insira um número maior do que 100.\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(EntradaDados, {\n        enviarDadosHandler: enviarDados\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Historico, {\n        historico: historicoDeCalculos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"77W1YwnKYKJwVf3HTUzXGklb/Kg=\");\n\n_c = App;\nexport default App;\nconst styles = {\n  // estilização da div principal\n  container: css`\n    font-family: \"Roboto\", sans-serif;\n    margin: 0;\n    margin-top: 2rem;\n    padding: 0;\n    box-sizing: border-box;\n    position: fixed;\n    left: 0;\n    right: 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  `\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/legendaryhero/programas/bridge/processo_seletivo/front_end/src/App.tsx"],"names":["useState","css","ToastContainer","toast","EntradaDados","Historico","api","App","historicoDeCalculos","setHistoricoDeCalculos","numeroMaximoDeConsultas","enviarDados","numero","length","error","response","get","existeSolucao","data","solucao","styles","container"],"mappings":";;;AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,OAAO,uCAAP,C,CAEA;;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,OAAOC,GAAP,MAAgB,kBAAhB;;;;AASA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDT,QAAQ,CAAuB,EAAvB,CAA9D,CAFa,CAIb;;AACA,QAAMU,uBAA+B,GAAG,EAAxC,CALa,CAOb;AACA;;AACA,QAAMC,WAAW,GAAG,MAAOC,MAAP,IAA0B;AAC5C,QAAIA,MAAM,GAAG,GAAb,EAAkB;AAEhB,UAAIJ,mBAAmB,CAACK,MAApB,IAA8BH,uBAAlC,EAA2D;AAEzDP,QAAAA,KAAK,CAACW,KAAN,CAAY,0EAAZ;AAED,OAJD,MAIO;AAEL,YAAI;AAEF,gBAAMC,QAAQ,GAAG,MAAMT,GAAG,CAACU,GAAJ,CAAS,kBAAiBJ,MAAO,EAAjC,CAAvB;AACA,gBAAMK,aAAiC,GAAIF,QAAQ,CAACG,IAApD;;AAEA,cAAID,aAAa,CAACE,OAAd,KAA0B,CAA9B,EAAiC;AAC/B;AACA;AACAhB,YAAAA,KAAK,CAACW,KAAN,CAAY,0DAAZ;AACD,WAJD,MAIO;AAEL;AACAL,YAAAA,sBAAsB,CAAC,CAAC,GAAGD,mBAAJ,EAAyBO,QAAQ,CAACG,IAAlC,CAAD,CAAtB;AACD;AACF,SAdD,CAcE,OAAOJ,KAAP,EAAc;AACdX,UAAAA,KAAK,CAACW,KAAN,CAAY,qCAAZ;AACD;AACF;AACF,KA1BD,MA0BO;AACLX,MAAAA,KAAK,CAACW,KAAN,CAAY,8CAAZ;AACD;AACF,GA9BD;;AAgCA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEM,MAAM,CAACC,SAAvB;AAAA,8BACE,QAAC,YAAD;AACE,QAAA,kBAAkB,EAAEV;AADtB;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,SAAD;AACE,QAAA,SAAS,EAAEH;AADb;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAUE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA,kBADF;AAcD;;GAvDQD,G;;KAAAA,G;AAyDT,eAAeA,GAAf;AAEA,MAAMa,MAAM,GAAG;AAAE;AACfC,EAAAA,SAAS,EAAEpB,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAde,CAAf","sourcesContent":["//importação de bibliotecas\nimport { useState } from 'react';\nimport { css } from '@emotion/css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n//importação de componentes da aplicação\nimport { EntradaDados } from './components/EntradaDados';\nimport { Historico } from './components/Historico';\nimport api from './api/apiCalculo';\n\n\ninterface InterfaceHistorico {\n  solucao: number,\n  numeroInicial: number,\n  tempoExecucao: number\n}\n\nfunction App() {\n  // estado para armazenar o histórico de consultas do usuário\n  const [historicoDeCalculos, setHistoricoDeCalculos] = useState<InterfaceHistorico[]>([]);\n\n  // variável que armazena o máximo de consultas permitidas pelo usuário por sessão\n  const numeroMaximoDeConsultas: number = 30;\n\n  // função que envia os dados à api e adiciona a resposta à constante historicoDeCalculos\n  // também verifica o número informado pelo usuário e exibe mensagens de erro\n  const enviarDados = async (numero: number) => {\n    if (numero > 100) {\n\n      if (historicoDeCalculos.length >= numeroMaximoDeConsultas) {\n\n        toast.error(\"Número máximo de consultas atingido. Atualize a página e tente novamente\")\n\n      } else {\n\n        try {\n\n          const response = await api.get(`/calculo?input=${numero}`);\n          const existeSolucao: InterfaceHistorico = (response.data);\n\n          if (existeSolucao.solucao === 0) {\n            // caso a API não tenha encontrado solução, retorna o valor 0\n            // a mensagem de erro é exibida ao usuário\n            toast.error(\"Não foi encontrada solução. Verifique o número informado\");\n          } else {\n\n            // caso a API retorne um valor válido, a nova resposta é armazenada \n            setHistoricoDeCalculos([...historicoDeCalculos, response.data]);\n          }\n        } catch (error) {\n          toast.error(\"Erro na comunicação com o servidor.\");\n        }\n      }\n    } else {\n      toast.error(\"Por favor insira um número maior do que 100.\");\n    }\n  }\n\n  return (\n    <>\n      <div className={styles.container}>\n        <EntradaDados\n          enviarDadosHandler={enviarDados}\n        />\n        <Historico\n          historico={historicoDeCalculos}\n        />\n\n      </div>\n      <ToastContainer />\n    </>\n  );\n}\n\nexport default App;\n\nconst styles = { // estilização da div principal\n  container: css`\n    font-family: \"Roboto\", sans-serif;\n    margin: 0;\n    margin-top: 2rem;\n    padding: 0;\n    box-sizing: border-box;\n    position: fixed;\n    left: 0;\n    right: 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  `,\n};"]},"metadata":{},"sourceType":"module"}